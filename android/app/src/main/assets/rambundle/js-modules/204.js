__d(function(g,r,i,a,m,e,d){'use strict';var t=r(d[0]),o=r(d[1]),s=r(d[2]),n=r(d[3]),p=r(d[4]),c=r(d[5]),l=r(d[6]),h=r(d[7]),u=r(d[8]),b=r(d[9]),f=r(d[10]),R=r(d[11]),y=r(d[12]),P=p.shape({type:p.oneOf(['RippleAndroid']),color:p.number,borderless:p.bool}),S=p.shape({type:p.oneOf(['ThemeAttrAndroid']),attribute:p.string.isRequired}),v=p.oneOfType([P,S]),T={top:20,left:20,right:20,bottom:30},H=f({displayName:'TouchableNativeFeedback',propTypes:o({},h.propTypes,{background:v,hasTVPreferredFocus:p.bool,useForeground:p.bool}),statics:{SelectableBackground:function(){return{type:'ThemeAttrAndroid',attribute:'selectableItemBackground'}},SelectableBackgroundBorderless:function(){return{type:'ThemeAttrAndroid',attribute:'selectableItemBackgroundBorderless'}},Ripple:function(t,o){return{type:'RippleAndroid',color:y(t),borderless:o}},canUseNativeForeground:function(){return s.Version>=23}},mixins:[l.Mixin],getDefaultProps:function(){return{background:this.SelectableBackground()}},getInitialState:function(){return this.touchableGetInitialState()},componentDidMount:function(){R(this.props)},UNSAFE_componentWillReceiveProps:function(t){R(t)},touchableHandleActivePressIn:function(t){this.props.onPressIn&&this.props.onPressIn(t),this._dispatchPressedStateChange(!0),this.pressInLocation&&this._dispatchHotspotUpdate(this.pressInLocation.locationX,this.pressInLocation.locationY)},touchableHandleActivePressOut:function(t){this.props.onPressOut&&this.props.onPressOut(t),this._dispatchPressedStateChange(!1)},touchableHandlePress:function(t){this.props.onPress&&this.props.onPress(t)},touchableHandleLongPress:function(t){this.props.onLongPress&&this.props.onLongPress(t)},touchableGetPressRectOffset:function(){return this.props.pressRetentionOffset||T},touchableGetHitSlop:function(){return this.props.hitSlop},touchableGetHighlightDelayMS:function(){return this.props.delayPressIn},touchableGetLongPressDelayMS:function(){return this.props.delayLongPress},touchableGetPressOutDelayMS:function(){return this.props.delayPressOut},_handleResponderMove:function(t){this.touchableHandleResponderMove(t),this._dispatchHotspotUpdate(t.nativeEvent.locationX,t.nativeEvent.locationY)},_dispatchHotspotUpdate:function(t,o){u.dispatchViewManagerCommand(c.findNodeHandle(this),u.getViewManagerConfig('RCTView').Commands.hotspotUpdate,[t||0,o||0])},_dispatchPressedStateChange:function(t){u.dispatchViewManagerCommand(c.findNodeHandle(this),u.getViewManagerConfig('RCTView').Commands.setPressed,[t])},render:function(){var s,p=n.Children.only(this.props.children),c=p.props.children;l.TOUCH_TARGET_DEBUG&&p.type===b&&(Array.isArray(c)||(c=[c]),c.push(l.renderDebugView({color:'brown',hitSlop:this.props.hitSlop}))),this.props.useForeground&&!H.canUseNativeForeground()&&console.warn("Requested foreground ripple, but it is not available on this version of Android. Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different Touchable if the result is false.");var h=this.props.useForeground&&H.canUseNativeForeground()?'nativeForegroundAndroid':'nativeBackgroundAndroid',u=o({},p.props,(t(s={},h,this.props.background),t(s,"accessible",!1!==this.props.accessible),t(s,"accessibilityLabel",this.props.accessibilityLabel),t(s,"accessibilityRole",this.props.accessibilityRole),t(s,"accessibilityStates",this.props.accessibilityStates),t(s,"children",c),t(s,"testID",this.props.testID),t(s,"onLayout",this.props.onLayout),t(s,"hitSlop",this.props.hitSlop),t(s,"isTVSelectable",!0),t(s,"hasTVPreferredFocus",this.props.hasTVPreferredFocus),t(s,"onStartShouldSetResponder",this.touchableHandleStartShouldSetResponder),t(s,"onResponderTerminationRequest",this.touchableHandleResponderTerminationRequest),t(s,"onResponderGrant",this.touchableHandleResponderGrant),t(s,"onResponderMove",this._handleResponderMove),t(s,"onResponderRelease",this.touchableHandleResponderRelease),t(s,"onResponderTerminate",this.touchableHandleResponderTerminate),s));return n.cloneElement(p,u)}});m.exports=H},204,[56,55,52,57,70,87,196,205,51,84,206,210,78]);